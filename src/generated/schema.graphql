### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthResponse {
  token: String!
  user: User!
}

type Currency {
  exchangeRateDollar: Float!
  id: ID!
  name: String!
}

type CurrencyAccount {
  balance: Float!
  currency: Currency!
  id: ID!
  walletId: String!
}

input CurrencyAccountFilter {
  every: CurrencyAccountWhereInput
  none: CurrencyAccountWhereInput
  some: CurrencyAccountWhereInput
}

input CurrencyAccountInput {
  balance: Float!
  currencyName: String!
  walletId: String!
}

input CurrencyAccountWhereInput {
  AND: [CurrencyAccountWhereInput!]
  balance: FloatFilter
  currency: CurrencyWhereInput
  id: StringFilter
  NOT: [CurrencyAccountWhereInput!]
  OR: [CurrencyAccountWhereInput!]
  user: UserWhereInput
  walletId: StringFilter
}

input CurrencyWhereInput {
  addressRegExp: StringFilter
  AND: [CurrencyWhereInput!]
  currencyAccounts: CurrencyAccountFilter
  exchangeRateDollar: FloatFilter
  id: StringFilter
  name: StringFilter
  NOT: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  transactions: TransactionFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

"""Monetary value type"""
scalar Monetary

type Mutation {
  addCurrencyAccount(data: CurrencyAccountInput!): User!
  deleteCurrencyAccount(currencyName: String!): User!
  dropAndSeedDB: Boolean!
  login(email: String!, password: String!): AuthResponse!
  register(data: RegisterInput!): AuthResponse!
  submitTransaction(data: SubmitTransactionInput!): Transaction!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  me: User!
  transaction(transactionId: String!): Transaction!
  transactions: [Transaction!]!
}

input RegisterInput {
  description: String
  email: String!
  maxAmountPerTranscationDollar: Float!
  name: String!
  password: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input SubmitTransactionInput {
  amount: Float!
  currencyName: String!
  targetUserId: String!
}

type Transaction {
  amount: Float!
  createdAt: String!
  currency: Currency!
  error: String
  id: ID!
  processedAt: String
  source: User!
  state: String!
  target: User!
}

enum TransactionError {
  AMOUNT_TO_LARGE
  SOURCE_USER_NOT_ENOUGH_CURRENCY
  SOURCE_USER_NOT_HAVING_CURRENCY
  TARGET_USER_NOT_HAVING_CURRENCY
}

input TransactionFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

enum TransactionState {
  Failed
  Pending
  Success
}

input TransactionWhereInput {
  amount: FloatFilter
  AND: [TransactionWhereInput!]
  createdAt: DateTimeFilter
  currency: CurrencyWhereInput
  error: TransactionError
  id: StringFilter
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  processedAt: NullableDateTimeFilter
  source: UserWhereInput
  state: TransactionState
  target: UserWhereInput
}

type User {
  currencyAccounts(where: CurrencyAccountWhereInput): [CurrencyAccount!]!
  description: String
  email: String!
  id: ID!
  maxAmountPerTranscationDollar: Float!
  name: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  currencyAccounts: CurrencyAccountFilter
  description: NullableStringFilter
  email: StringFilter
  id: StringFilter
  maxAmountPerTranscationDollar: FloatFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  sourceTransactions: TransactionFilter
  targetTransactions: TransactionFilter
}
