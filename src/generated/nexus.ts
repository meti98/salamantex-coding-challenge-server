/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../utils"
import * as photon from "@prisma/photon"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    monetary<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Monetary";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    monetary<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Monetary";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CurrencyAccountFilter: { // input type
    every?: NexusGenInputs['CurrencyAccountWhereInput'] | null; // CurrencyAccountWhereInput
    none?: NexusGenInputs['CurrencyAccountWhereInput'] | null; // CurrencyAccountWhereInput
    some?: NexusGenInputs['CurrencyAccountWhereInput'] | null; // CurrencyAccountWhereInput
  }
  CurrencyAccountInput: { // input type
    balance: number; // Float!
    currencyName: string; // String!
    walletId: string; // String!
  }
  CurrencyAccountWhereInput: { // input type
    AND?: NexusGenInputs['CurrencyAccountWhereInput'][] | null; // [CurrencyAccountWhereInput!]
    balance?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    currency?: NexusGenInputs['CurrencyWhereInput'] | null; // CurrencyWhereInput
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['CurrencyAccountWhereInput'][] | null; // [CurrencyAccountWhereInput!]
    OR?: NexusGenInputs['CurrencyAccountWhereInput'][] | null; // [CurrencyAccountWhereInput!]
    user?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    walletId?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  CurrencyWhereInput: { // input type
    addressRegExp?: NexusGenInputs['StringFilter'] | null; // StringFilter
    AND?: NexusGenInputs['CurrencyWhereInput'][] | null; // [CurrencyWhereInput!]
    currencyAccounts?: NexusGenInputs['CurrencyAccountFilter'] | null; // CurrencyAccountFilter
    exchangeRateDollar?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['CurrencyWhereInput'][] | null; // [CurrencyWhereInput!]
    OR?: NexusGenInputs['CurrencyWhereInput'][] | null; // [CurrencyWhereInput!]
    transactions?: NexusGenInputs['TransactionFilter'] | null; // TransactionFilter
  }
  DateTimeFilter: { // input type
    equals?: any | null; // DateTime
    gt?: any | null; // DateTime
    gte?: any | null; // DateTime
    in?: any[] | null; // [DateTime!]
    lt?: any | null; // DateTime
    lte?: any | null; // DateTime
    not?: any | null; // DateTime
    notIn?: any[] | null; // [DateTime!]
  }
  FloatFilter: { // input type
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number[] | null; // [Float!]
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: number | null; // Float
    notIn?: number[] | null; // [Float!]
  }
  NullableDateTimeFilter: { // input type
    equals?: any | null; // DateTime
    gt?: any | null; // DateTime
    gte?: any | null; // DateTime
    in?: any[] | null; // [DateTime!]
    lt?: any | null; // DateTime
    lte?: any | null; // DateTime
    not?: any | null; // DateTime
    notIn?: any[] | null; // [DateTime!]
  }
  NullableStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  RegisterInput: { // input type
    description?: string | null; // String
    email: string; // String!
    maxAmountPerTranscationDollar: number; // Float!
    name: string; // String!
    password: string; // String!
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  SubmitTransactionInput: { // input type
    amount: number; // Float!
    currencyName: string; // String!
    targetUserId: string; // String!
  }
  TransactionFilter: { // input type
    every?: NexusGenInputs['TransactionWhereInput'] | null; // TransactionWhereInput
    none?: NexusGenInputs['TransactionWhereInput'] | null; // TransactionWhereInput
    some?: NexusGenInputs['TransactionWhereInput'] | null; // TransactionWhereInput
  }
  TransactionWhereInput: { // input type
    amount?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    AND?: NexusGenInputs['TransactionWhereInput'][] | null; // [TransactionWhereInput!]
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    currency?: NexusGenInputs['CurrencyWhereInput'] | null; // CurrencyWhereInput
    error?: NexusGenEnums['TransactionError'] | null; // TransactionError
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['TransactionWhereInput'][] | null; // [TransactionWhereInput!]
    OR?: NexusGenInputs['TransactionWhereInput'][] | null; // [TransactionWhereInput!]
    processedAt?: NexusGenInputs['NullableDateTimeFilter'] | null; // NullableDateTimeFilter
    source?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    state?: NexusGenEnums['TransactionState'] | null; // TransactionState
    target?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
  }
  UserWhereInput: { // input type
    AND?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    currencyAccounts?: NexusGenInputs['CurrencyAccountFilter'] | null; // CurrencyAccountFilter
    description?: NexusGenInputs['NullableStringFilter'] | null; // NullableStringFilter
    email?: NexusGenInputs['StringFilter'] | null; // StringFilter
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    maxAmountPerTranscationDollar?: NexusGenInputs['FloatFilter'] | null; // FloatFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    OR?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    password?: NexusGenInputs['StringFilter'] | null; // StringFilter
    sourceTransactions?: NexusGenInputs['TransactionFilter'] | null; // TransactionFilter
    targetTransactions?: NexusGenInputs['TransactionFilter'] | null; // TransactionFilter
  }
}

export interface NexusGenEnums {
  TransactionError: photon.TransactionError
  TransactionState: photon.TransactionState
}

export interface NexusGenRootTypes {
  AuthResponse: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Currency: photon.Currency;
  CurrencyAccount: photon.CurrencyAccount;
  Mutation: {};
  Query: {};
  Transaction: photon.Transaction;
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  Monetary: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CurrencyAccountFilter: NexusGenInputs['CurrencyAccountFilter'];
  CurrencyAccountInput: NexusGenInputs['CurrencyAccountInput'];
  CurrencyAccountWhereInput: NexusGenInputs['CurrencyAccountWhereInput'];
  CurrencyWhereInput: NexusGenInputs['CurrencyWhereInput'];
  DateTimeFilter: NexusGenInputs['DateTimeFilter'];
  FloatFilter: NexusGenInputs['FloatFilter'];
  NullableDateTimeFilter: NexusGenInputs['NullableDateTimeFilter'];
  NullableStringFilter: NexusGenInputs['NullableStringFilter'];
  RegisterInput: NexusGenInputs['RegisterInput'];
  StringFilter: NexusGenInputs['StringFilter'];
  SubmitTransactionInput: NexusGenInputs['SubmitTransactionInput'];
  TransactionFilter: NexusGenInputs['TransactionFilter'];
  TransactionWhereInput: NexusGenInputs['TransactionWhereInput'];
  UserWhereInput: NexusGenInputs['UserWhereInput'];
  TransactionError: NexusGenEnums['TransactionError'];
  TransactionState: NexusGenEnums['TransactionState'];
}

export interface NexusGenFieldTypes {
  AuthResponse: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Currency: { // field return type
    exchangeRateDollar: number; // Float!
    id: string; // ID!
    name: string; // String!
  }
  CurrencyAccount: { // field return type
    balance: number; // Float!
    currency: NexusGenRootTypes['Currency']; // Currency!
    id: string; // ID!
    walletId: string; // String!
  }
  Mutation: { // field return type
    addCurrencyAccount: NexusGenRootTypes['User']; // User!
    deleteCurrencyAccount: NexusGenRootTypes['User']; // User!
    dropAndSeedDB: boolean; // Boolean!
    login: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    register: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    submitTransaction: NexusGenRootTypes['Transaction']; // Transaction!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User']; // User!
    transaction: NexusGenRootTypes['Transaction']; // Transaction!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  Transaction: { // field return type
    amount: number; // Float!
    createdAt: string; // String!
    currency: NexusGenRootTypes['Currency']; // Currency!
    error: string | null; // String
    id: string; // ID!
    processedAt: string | null; // String
    source: NexusGenRootTypes['User']; // User!
    state: string; // String!
    target: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    currencyAccounts: NexusGenRootTypes['CurrencyAccount'][]; // [CurrencyAccount!]!
    description: string | null; // String
    email: string; // String!
    id: string; // ID!
    maxAmountPerTranscationDollar: number; // Float!
    name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCurrencyAccount: { // args
      data: NexusGenInputs['CurrencyAccountInput']; // CurrencyAccountInput!
    }
    deleteCurrencyAccount: { // args
      currencyName: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      data: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
    submitTransaction: { // args
      data: NexusGenInputs['SubmitTransactionInput']; // SubmitTransactionInput!
    }
  }
  Query: {
    transaction: { // args
      transactionId: string; // String!
    }
  }
  User: {
    currencyAccounts: { // args
      where?: NexusGenInputs['CurrencyAccountWhereInput'] | null; // CurrencyAccountWhereInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthResponse" | "Currency" | "CurrencyAccount" | "Mutation" | "Query" | "Transaction" | "User";

export type NexusGenInputNames = "CurrencyAccountFilter" | "CurrencyAccountInput" | "CurrencyAccountWhereInput" | "CurrencyWhereInput" | "DateTimeFilter" | "FloatFilter" | "NullableDateTimeFilter" | "NullableStringFilter" | "RegisterInput" | "StringFilter" | "SubmitTransactionInput" | "TransactionFilter" | "TransactionWhereInput" | "UserWhereInput";

export type NexusGenEnumNames = "TransactionError" | "TransactionState";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "Monetary" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}