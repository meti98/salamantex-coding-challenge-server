/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../utils"
import * as photon from "@prisma/photon"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CurrencyAccountInput: { // input type
    balance: string; // String!
    currencyName: string; // String!
    walletId: string; // String!
  }
  RegisterInput: { // input type
    description?: string | null; // String
    email: string; // String!
    maxAmountPerTranscationDollar: string; // String!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthResponse: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Currency: photon.Currency;
  CurrencyAccount: photon.CurrencyAccount;
  Mutation: {};
  Query: {};
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CurrencyAccountInput: NexusGenInputs['CurrencyAccountInput'];
  RegisterInput: NexusGenInputs['RegisterInput'];
}

export interface NexusGenFieldTypes {
  AuthResponse: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Currency: { // field return type
    exchangeRateDollar: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  CurrencyAccount: { // field return type
    balance: string; // String!
    currency: NexusGenRootTypes['Currency']; // Currency!
    id: string; // ID!
    walletId: string; // String!
  }
  Mutation: { // field return type
    addCurrencyAccount: NexusGenRootTypes['User']; // User!
    deleteCurrencyAccount: NexusGenRootTypes['User']; // User!
    dropAndSeedDB: boolean; // Boolean!
    login: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    register: NexusGenRootTypes['AuthResponse']; // AuthResponse!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    currencyAccounts: NexusGenRootTypes['CurrencyAccount'][]; // [CurrencyAccount!]!
    description: string | null; // String
    email: string; // String!
    id: string; // ID!
    maxAmountPerTranscationDollar: string; // String!
    name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCurrencyAccount: { // args
      data: NexusGenInputs['CurrencyAccountInput']; // CurrencyAccountInput!
    }
    deleteCurrencyAccount: { // args
      currencyName: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      data: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthResponse" | "Currency" | "CurrencyAccount" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "CurrencyAccountInput" | "RegisterInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}